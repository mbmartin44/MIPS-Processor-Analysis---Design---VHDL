library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity control is
    port (
        opcode   : in std_logic_vector(5 downto 0);
        RegDst   : out std_logic;
        Branch   : out std_logic;
        MemRead  : out std_logic;
        MemWrite : out std_logic;
        MemtoReg : out std_logic;
        ALUOp    : out std_logic_vector(1 downto 0);
        ALUSrc   : out std_logic;
        RegWrite : out std_logic;
        Jump     : out std_logic
    );
end entity;

architecture behavioral of control is
begin
    process(opcode)
    begin
        RegDst <= '0';
        Branch <= '0';
        MemRead <= '0';
        MemWrite <= '1';
        MemtoReg <= '0';
        ALUOp <="00";
        ALUSrc <= '0';
        RegWrite <= '0';
        Jump <= '0';
        if (opcode = "00000") then -- R-Type
            RegDst <= '1';
            ALUSrc <= '0';
            MemtoReg <= '0';
            RegWrite <= '1';
            MemRead <= '0';
            MemWrite <= '0';
            Branch <= '0';
            ALUOp <= "10";
            Jump <= '0';
        elsif (opcode = "100011") then --LW
            RegDst <= '1';
            ALUSrc <= '0';
            MemtoReg <= '0';
            RegWrite <= '1';
            MemRead <= '0';
            MemWrite <= '0';
            Branch <= '0';
            ALUOp <= "00";
            Jump <= '0';
        elsif (opcode = "101011") then --SW
            RegDst <= '0';
            ALUSrc <= '1';
            MemtoReg <= '0';
            RegWrite <= '0';
            MemRead <= '0';
            MemWrite <= '1';
            Branch <= '0';
            ALUOp <= "00";
            Jump <= '0';
        elsif (opcode = "001000") then     --BEQ
            RegDst <= '0';
            ALUSrc <= '0';
            MemtoReg <= '0';
            RegWrite <= '0';
            MemRead <= '0';
            MemWrite <= '0';
            Branch <= '1';
            ALUOp <= "01";
            Jump <= '0';
        else                                --jump
            RegDst <= '0';
            ALUSrc <= '0';
            MemtoReg <= '0';
            RegWrite <= '0';
            MemRead <= '0';
            MemWrite <= '0';
            Branch <= '0';
            ALUOp <= "00";
            Jump <= '1';
        end if;
    end process;
end behavioral;